<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/predict/RequestResponseLoggingFilter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/predict/RequestResponseLoggingFilter.java" />
              <option name="originalContent" value="package com.example.predict;&#10;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import java.io.IOException;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.Collections;&#10;import java.util.Enumeration;&#10;import java.util.stream.Collectors;&#10;&#10;@Component&#10;public class RequestResponseLoggingFilter extends OncePerRequestFilter {&#10;    private static final Logger logger = LoggerFactory.getLogger(RequestResponseLoggingFilter.class);&#10;&#10;    @Override&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)&#10;            throws ServletException, IOException {&#10;        // Log request details&#10;        logger.info(&quot;Incoming Request: {} {}&quot;, request.getMethod(), request.getRequestURI());&#10;        logger.info(&quot;Headers: {}&quot;, Collections.list(request.getHeaderNames()).stream()&#10;                .collect(Collectors.toMap(h -&gt; h, request::getHeader)));&#10;        // For body logging, use ContentCaching wrappers (not shown for brevity)&#10;        filterChain.doFilter(request, response);&#10;        // Log response details&#10;        logger.info(&quot;Response Status: {} for {} {}&quot;, response.getStatus(), request.getMethod(), request.getRequestURI());&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.predict;&#13;&#10;&#13;&#10;import jakarta.servlet.FilterChain;&#13;&#10;import jakarta.servlet.ServletException;&#13;&#10;import jakarta.servlet.http.HttpServletRequest;&#13;&#10;import jakarta.servlet.http.HttpServletResponse;&#13;&#10;import org.slf4j.Logger;&#13;&#10;import org.slf4j.LoggerFactory;&#13;&#10;import org.springframework.stereotype.Component;&#13;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#13;&#10;import org.springframework.web.util.ContentCachingRequestWrapper;&#13;&#10;import org.springframework.web.util.ContentCachingResponseWrapper;&#13;&#10;&#13;&#10;import java.io.IOException;&#13;&#10;import java.nio.charset.StandardCharsets;&#13;&#10;import java.util.Collections;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;@Component&#13;&#10;public class RequestResponseLoggingFilter extends OncePerRequestFilter {&#13;&#10;    private static final Logger logger = LoggerFactory.getLogger(RequestResponseLoggingFilter.class);&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)&#13;&#10;            throws ServletException, IOException {&#13;&#10;        ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(request);&#13;&#10;        ContentCachingResponseWrapper wrappedResponse = new ContentCachingResponseWrapper(response);&#13;&#10;        long start = System.currentTimeMillis();&#13;&#10;        try {&#13;&#10;            logger.info(&quot;Incoming Request: {} {}&quot;, wrappedRequest.getMethod(), wrappedRequest.getRequestURI());&#13;&#10;            logger.info(&quot;Headers: {}&quot;, Collections.list(wrappedRequest.getHeaderNames()).stream()&#13;&#10;                    .collect(Collectors.toMap(h -&gt; h, wrappedRequest::getHeader)));&#13;&#10;            filterChain.doFilter(wrappedRequest, wrappedResponse);&#13;&#10;        } finally {&#13;&#10;            long duration = System.currentTimeMillis() - start;&#13;&#10;            String requestBody = new String(wrappedRequest.getContentAsByteArray(), StandardCharsets.UTF_8);&#13;&#10;            String responseBody = new String(wrappedResponse.getContentAsByteArray(), StandardCharsets.UTF_8);&#13;&#10;            logger.info(&quot;Request Body: {}&quot;, requestBody);&#13;&#10;            logger.info(&quot;Response Status: {} for {} {} in {}ms&quot;, wrappedResponse.getStatus(), wrappedRequest.getMethod(), wrappedRequest.getRequestURI(), duration);&#13;&#10;            logger.info(&quot;Response Body: {}&quot;, responseBody);&#13;&#10;            wrappedResponse.copyBodyToResponse();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/predict/db/PredictionResult.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/predict/db/PredictionResult.java" />
              <option name="originalContent" value="package com.example.predict.db;&#10;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.Instant;&#10;import java.util.Map;&#10;&#10;@Document(collection = &quot;predictions&quot;)&#10;public class PredictionResult {&#10;  @Id&#10;  private String id;&#10;&#10;  private String task;&#10;  private Map&lt;String, Object&gt; input;&#10;  private Map&lt;String, Object&gt; output;&#10;  private String scriptPath;&#10;  private String modelPathUsed;&#10;  private Integer exitCode;&#10;  private String stderr;&#10;  private Instant createdAt = Instant.now();&#10;&#10;  public String getId() { return id; }&#10;  public void setId(String id) { this.id = id; }&#10;  public String getTask() { return task; }&#10;  public void setTask(String task) { this.task = task; }&#10;  public Map&lt;String, Object&gt; getInput() { return input; }&#10;  public void setInput(Map&lt;String, Object&gt; input) { this.input = input; }&#10;  public Map&lt;String, Object&gt; getOutput() { return output; }&#10;  public void setOutput(Map&lt;String, Object&gt; output) { this.output = output; }&#10;  public String getScriptPath() { return scriptPath; }&#10;  public void setScriptPath(String scriptPath) { this.scriptPath = scriptPath; }&#10;  public String getModelPathUsed() { return modelPathUsed; }&#10;  public void setModelPathUsed(String modelPathUsed) { this.modelPathUsed = modelPathUsed; }&#10;  public Integer getExitCode() { return exitCode; }&#10;  public void setExitCode(Integer exitCode) { this.exitCode = exitCode; }&#10;  public String getStderr() { return stderr; }&#10;  public void setStderr(String stderr) { this.stderr = stderr; }&#10;  public Instant getCreatedAt() { return createdAt; }&#10;  public void setCreatedAt(Instant createdAt) { this.createdAt = createdAt; }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.predict.db;&#10;&#10;import com.fasterxml.jackson.annotation.JsonProperty;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;import java.time.Instant;&#10;import java.util.Map;&#10;&#10;@Document(collection = &quot;predictions&quot;)&#10;public class PredictionResult {&#10;  @Id&#10;  private String id;&#10;&#10;  private String task;&#10;  private Map&lt;String, Object&gt; input;&#10;  private Map&lt;String, Object&gt; output;&#10;  private String scriptPath;&#10;  private String modelPathUsed;&#10;  private Integer exitCode;&#10;  private String stderr;&#10;  private Instant createdAt = Instant.now();&#10;&#10;  @JsonProperty(&quot;_class&quot;)&#10;  private final String className = &quot;com.example.predict.db.PredictionResult&quot;;&#10;&#10;  public String getId() { return id; }&#10;  public void setId(String id) { this.id = id; }&#10;  public String getTask() { return task; }&#10;  public void setTask(String task) { this.task = task; }&#10;  public Map&lt;String, Object&gt; getInput() { return input; }&#10;  public void setInput(Map&lt;String, Object&gt; input) { this.input = input; }&#10;  public Map&lt;String, Object&gt; getOutput() { return output; }&#10;  public void setOutput(Map&lt;String, Object&gt; output) { this.output = output; }&#10;  public String getScriptPath() { return scriptPath; }&#10;  public void setScriptPath(String scriptPath) { this.scriptPath = scriptPath; }&#10;  public String getModelPathUsed() { return modelPathUsed; }&#10;  public void setModelPathUsed(String modelPathUsed) { this.modelPathUsed = modelPathUsed; }&#10;  public Integer getExitCode() { return exitCode; }&#10;  public void setExitCode(Integer exitCode) { this.exitCode = exitCode; }&#10;  public String getStderr() { return stderr; }&#10;  public void setStderr(String stderr) { this.stderr = stderr; }&#10;  public Instant getCreatedAt() { return createdAt; }&#10;  public void setCreatedAt(Instant createdAt) { this.createdAt = createdAt; }&#10;  public String getClassName() { return className; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>